{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bryan\\\\Documents\\\\React-Project\\\\src\\\\components\\\\WidgetCreated\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport './index.css';\nimport { MainContext } from '../../context/MainContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WidgetCreated = () => {\n  _s();\n  const {\n    entryText,\n    userTxTBubble,\n    AiTxtBubble,\n    widgetBgColor,\n    widgetColor,\n    xBtnColor,\n    submitBtn,\n    headerColor,\n    pfpLineColor,\n    footerColor,\n    VAimg,\n    APIKEY\n  } = useContext(MainContext);\n  const html = `\n  <div id=\"chat-widget\">\n    {/*SECTION - Below This is the chat */}\n    <div id=\"widget-open-icon\" style={{ display: toggle.ChatWidget }}>\n      <div id=\"chat-header\">\n        <div className=\"img-trim\">\n          {<img id=\"widget-profile\" src={require('${VAimg}')}/>}\n        </div>\n        <h2>${entryText}</h2>\n        {/*NOTE - This is the entry comment */} \n      </div>\n      <div id=\"chat-body\">\n        <div id=\"chat-messages\" ref={handleScroll}>\n          {chatDisplay}\n        </div>\n        <form id=\"chat-input\" onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            id=\"user-input\"\n            value={input}\n            onChange={handleInput}\n            placeholder=\"Type your message...\"\n          />\n          <button id=\"send-button\">\n            Send\n          </button>\n        </form>\n      </div>\n    </div>\n    {/*SECTION - Below is the Wiget bubble icons for close and open */}\n    <div id=\"closing-widget-icon-div\" style={{ display: toggle.ChatWidget }} onClick={handleToggle}>\n      <i className=\"fa-light fa-x closing-widget-icon widget-Icon\"></i>\n    </div>\n    <div id=\"neutral-widget-icon-div\" style={{ display: toggle.NeutralWidget}} onClick={handleToggle}>\n      <i className=\"far neutral-widget-icon widget-Icon\">&#xf086;</i>\n    </div>\n  </div>\n  `;\n  const exception = \"`${chatArray[chatArray.length - 1]}`\";\n  const javascript = `\n// SECTION - Set up states\nconst [toggle, setToggle] = useState({\n  NeutralWidget: '',\n  ChatWidget: 'none',\n});\nconst [input, setInput] = useState('');\nconst [chatArray, setChatArray] = useState([]);\nconst [convoCounter, SetConvoCounter] = useState(1)\n\nconst handleToggle = (e) => {\n  if (e.target.className.includes('neutral-widget-icon')) {\n    setToggle({\n      NeutralWidget: 'none',\n      ChatWidget: '',\n    });\n  } else {\n    setToggle({\n      NeutralWidget: '',\n      ChatWidget: 'none',\n    });\n  }\n};\n\nconst handleInput = (e) => {\n  setInput(e.target.value);\n};\n\nconst handleSubmit = (e) => {\n  e.preventDefault()\n  if(input == \"\") return\n  setChatArray([...chatArray, input]);\n  setInput('');\n  SetConvoCounter(convoCounter + 1)\n};\nconst handleScroll = (e) =>{\n  if(e === null) return\n  e.scrollTop = e.scrollHeight\n}\n// SECTION - Populates the chat \nconst chatDisplay = chatArray.map((text, index) =>{\n  if(typeof text != \"string\"){\n    console.log(text.response)\n    return(\n      <div className='VA-Text-Bubble-Div' key={index} >\n        <p className='VA-Text-Bubble'>{text.response}</p>\n      </div>\n    )\n  }else{\n    return (\n    <div className=\"User-Text-Bubble-Div\" key={index}>\n      <p className=\"User-Text-Bubble\">{text} </p>\n    </div>\n    )\n  }\n}\n);\n\n//SECTION - ChatGPT API\nuseEffect(()=>{\n  async function queryChatbot(prompt, userParams = '') {\n    const url = 'https://api.openai.com/v1/chat/completions';\n    const headers = {\n      'Content-Type': 'application/json',\n      'Authorization': '${APIKEY}'\n    };\n  \n    const systemMessage = { role: 'system', content: 'You are a helpful assistant.' };\n    const userMessage = { role: 'user', content: prompt };\n    const messages = [systemMessage, userMessage];\n  \n    if (userParams) {\n      const paramMessage = { role: 'user', content: userParams };\n      messages.push(paramMessage);\n    }\n  \n    const data = {\n      model: 'gpt-3.5-turbo',\n      messages\n    };\n  \n    try {\n      const response = await axios.post(url, data, { headers });\n      const chatResult = response.data.choices[0].message.content;\n      return chatResult;\n    } catch (error) {\n      console.error('Error:', error.response.data);\n      return null;\n    }\n  }\n  const prompt = ${exception};\n  const userParams = 'Only answer business-related questions. If they are not business related, ONLY say \"sorry, I can only assist in business related things\"';\n  \n  queryChatbot(prompt, userParams)\n    .then(response => {\n      setChatArray([...chatArray, {response}]);\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n}, [convoCounter])\n\n`;\n  const css = `\n/*SECTION - Widget Icon design and functionality*/\n.widget-Icon{\n    font-size: 36px;\n    border-radius: 50%;\n    height: 36px;\n    padding: 15px;\n    transition: box-shadow .2s ease;\n    cursor: pointer;\n    /* pointer-events: none; */\n    text-align: center;\n}\n.neutral-widget-icon{\n    background-color: ${widgetColor};\n    width: 38px;\n    padding: 16px 20px 16px 13px;\n}\n.neutral-widget-icon:hover {\n    box-shadow: 0 0 10px rgba(255, 255, 255, 1); /* Apply the glowing effect on hover */\n}\n.closing-widget-icon{\n    background-color: ${xBtnColor};\n    color: white;\n    width: 36px;\n    line-height: 32px;\n}\n.closing-widget-icon:hover{\n    box-shadow: 0 0 10px rgb(87, 87, 87); /* Apply the glowing effect on hover */\n}\n#neutral-widget-icon-div::selection{\n    transform: rotate(180deg) translateY(11px);\n}\n#closing-widget-icon-div::selection{\n    transform: rotate(-180deg) translateY(-19px);\n}\n#closing-widget-icon-div, #neutral-widget-icon-div{\n    transition: all 0.2s ease-in-out 0s;\n    /* cursor: pointer; */\n    justify-self: center;\n}\n#closing-widget-icon-div{\n    padding-top: 20px;\n}\n\n\n#widget-open-icon{\n    position: relative; /*FIXME - FIX THIS LATER TO MAKE POSITION IN THE RIGHT BOTTOM CORNER */\n    width: 320px;\n    border: 1px solid #ccc;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n}\n#chat-widget {\n    margin-left: auto;\n    margin-right: auto;\n    grid-column: span 2;\n    display: grid;\n    grid-template-rows: 6fr 1fr;\n    grid-template-columns: 1fr;\n    width: 100%;\n    height: 95%;\n}\n\n\n/*SECTION - Header elements (img, entry text, and header color)*/\n#chat-header {\n    padding: 10px;\n    background-color: ${headerColor}\n    border-bottom: 2px solid #ccc;\n    display: flex;\n}\n.img-trim{\n    position: absolute;\n    max-height: 50px;\n    max-width: 50px;\n    overflow: hidden;\n    border-radius: 100%;\n    bottom: 93%;\n    border: 4px solid;\n    border-color: ${pfpLineColor};\n}\n#widget-profile{\n    width: 120px;\n    height: 60px;\n    padding: 0;\n    margin-left: -30px;\n    /* margin-top: 0px; */\n}\n#chat-header h2 {\n    margin: 0;\n    font-size: 16px;\n    color: #333;\n    margin-left: 80px;\n    margin: 8px 8px 8px 65px;\n}\n\n/*SECTION - Chat design */\n#widget-open-icon{\n    border: transparent;\n    justify-self: center;\n    margin-right: 260px;\n    max-height: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-rows: 12% 88%;\n    grid-template-columns: 1fr;\n    padding: 0; \n    transition: all 300ms ease 0s;\n}\n#chat-body {\n    height: 100%;\n    display: grid;\n    grid-template-rows: 87% 13%;\n    overflow-x: hidden;\n}\n\n#chat-input {\n    padding: 10px;\n    background-color: ${footerColor};\n    border-top: 1px solid #ccc;\n    align-self: end;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n}\n\n#chat-input input[type=\"text\"] {\n    width: 200px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n}\n\n#chat-input button {\n    padding: 5px 10px;\n    margin-left: 10px;\n    border: none;\n    color: #fff;\n    border-radius: 3px;\n    cursor: pointer;\n}\n\n#chat-messages {\n    height: 390px;\n    width: 100%;\n    max-height: 390px;\n    overflow-y: scroll;\n    ${widgetBgColor}\n}\n\n.chat-message {\n    margin-bottom: 10px;\n}\n\n.user-message {\n    background-color: #e2f3f5;\n    padding: 5px 10px;\n    border-radius: 3px;\n}\n\n.assistant-message {\n    background-color: #d3d3d3;\n    padding: 5px 10px;\n    border-radius: 3px;\n}\n\n/*SECTION - Chat Design  */\n.User-Text-Bubble{\n    margin-right: 10px;\n}\n.User-Text-Bubble-Div{\n    margin: 10px;\n    width: fit-content;\n    margin-left: auto;\n    padding-left: 10px;\n    position: relative;\n    display: flex;\n    justify-content: end;\n    ${userTxTBubble}\n    border-radius: 10px 10px 0px 10px;\n}\n.VA-Text-Bubble{\n    margin-left: 10px;\n}\n.VA-Text-Bubble-Div{\n    margin: 10px;\n    width: fit-content;\n    position: relative;\n    display: flex;\n    margin-right: 20%;\n    justify-content: start;\n    ${AiTxtBubble}\n    border-radius: 10px 10px 10px 0px;\n}\n\n#chat-input > *{\n    height: 40px;\n}\n#send-button{\n  background-color: ${submitBtn}\n}\n`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"FormBorder\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"Output-Border\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"html\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"HTML\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: html\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"javascript\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Javascript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: javascript\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"css\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"CSS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: css\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 5\n  }, this);\n};\n_s(WidgetCreated, \"9GFjATEcCg3NipH4ayMN4Q4NafI=\");\n_c = WidgetCreated;\nexport default WidgetCreated;\nvar _c;\n$RefreshReg$(_c, \"WidgetCreated\");","map":{"version":3,"names":["React","useContext","MainContext","jsxDEV","_jsxDEV","WidgetCreated","_s","entryText","userTxTBubble","AiTxtBubble","widgetBgColor","widgetColor","xBtnColor","submitBtn","headerColor","pfpLineColor","footerColor","VAimg","APIKEY","html","exception","javascript","css","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bryan/Documents/React-Project/src/components/WidgetCreated/index.js"],"sourcesContent":["import React, { useContext } from 'react'\r\nimport './index.css'\r\nimport { MainContext } from '../../context/MainContext'\r\nconst WidgetCreated = () => {\r\n  const {\r\n    entryText,\r\n    userTxTBubble,\r\n    AiTxtBubble,\r\n    widgetBgColor,\r\n    widgetColor,\r\n    xBtnColor,\r\n    submitBtn,\r\n    headerColor,\r\n    pfpLineColor,\r\n    footerColor,\r\n    VAimg,\r\n    APIKEY\r\n  } = useContext(MainContext)\r\n\r\n  const html = `\r\n  <div id=\"chat-widget\">\r\n    {/*SECTION - Below This is the chat */}\r\n    <div id=\"widget-open-icon\" style={{ display: toggle.ChatWidget }}>\r\n      <div id=\"chat-header\">\r\n        <div className=\"img-trim\">\r\n          {<img id=\"widget-profile\" src={require('${VAimg}')}/>}\r\n        </div>\r\n        <h2>${entryText}</h2>\r\n        {/*NOTE - This is the entry comment */} \r\n      </div>\r\n      <div id=\"chat-body\">\r\n        <div id=\"chat-messages\" ref={handleScroll}>\r\n          {chatDisplay}\r\n        </div>\r\n        <form id=\"chat-input\" onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            id=\"user-input\"\r\n            value={input}\r\n            onChange={handleInput}\r\n            placeholder=\"Type your message...\"\r\n          />\r\n          <button id=\"send-button\">\r\n            Send\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    {/*SECTION - Below is the Wiget bubble icons for close and open */}\r\n    <div id=\"closing-widget-icon-div\" style={{ display: toggle.ChatWidget }} onClick={handleToggle}>\r\n      <i className=\"fa-light fa-x closing-widget-icon widget-Icon\"></i>\r\n    </div>\r\n    <div id=\"neutral-widget-icon-div\" style={{ display: toggle.NeutralWidget}} onClick={handleToggle}>\r\n      <i className=\"far neutral-widget-icon widget-Icon\">&#xf086;</i>\r\n    </div>\r\n  </div>\r\n  `\r\n\r\nconst exception = \"`${chatArray[chatArray.length - 1]}`\"\r\nconst javascript = `\r\n// SECTION - Set up states\r\nconst [toggle, setToggle] = useState({\r\n  NeutralWidget: '',\r\n  ChatWidget: 'none',\r\n});\r\nconst [input, setInput] = useState('');\r\nconst [chatArray, setChatArray] = useState([]);\r\nconst [convoCounter, SetConvoCounter] = useState(1)\r\n\r\nconst handleToggle = (e) => {\r\n  if (e.target.className.includes('neutral-widget-icon')) {\r\n    setToggle({\r\n      NeutralWidget: 'none',\r\n      ChatWidget: '',\r\n    });\r\n  } else {\r\n    setToggle({\r\n      NeutralWidget: '',\r\n      ChatWidget: 'none',\r\n    });\r\n  }\r\n};\r\n\r\nconst handleInput = (e) => {\r\n  setInput(e.target.value);\r\n};\r\n\r\nconst handleSubmit = (e) => {\r\n  e.preventDefault()\r\n  if(input == \"\") return\r\n  setChatArray([...chatArray, input]);\r\n  setInput('');\r\n  SetConvoCounter(convoCounter + 1)\r\n};\r\nconst handleScroll = (e) =>{\r\n  if(e === null) return\r\n  e.scrollTop = e.scrollHeight\r\n}\r\n// SECTION - Populates the chat \r\nconst chatDisplay = chatArray.map((text, index) =>{\r\n  if(typeof text != \"string\"){\r\n    console.log(text.response)\r\n    return(\r\n      <div className='VA-Text-Bubble-Div' key={index} >\r\n        <p className='VA-Text-Bubble'>{text.response}</p>\r\n      </div>\r\n    )\r\n  }else{\r\n    return (\r\n    <div className=\"User-Text-Bubble-Div\" key={index}>\r\n      <p className=\"User-Text-Bubble\">{text} </p>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n);\r\n\r\n//SECTION - ChatGPT API\r\nuseEffect(()=>{\r\n  async function queryChatbot(prompt, userParams = '') {\r\n    const url = 'https://api.openai.com/v1/chat/completions';\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': '${APIKEY}'\r\n    };\r\n  \r\n    const systemMessage = { role: 'system', content: 'You are a helpful assistant.' };\r\n    const userMessage = { role: 'user', content: prompt };\r\n    const messages = [systemMessage, userMessage];\r\n  \r\n    if (userParams) {\r\n      const paramMessage = { role: 'user', content: userParams };\r\n      messages.push(paramMessage);\r\n    }\r\n  \r\n    const data = {\r\n      model: 'gpt-3.5-turbo',\r\n      messages\r\n    };\r\n  \r\n    try {\r\n      const response = await axios.post(url, data, { headers });\r\n      const chatResult = response.data.choices[0].message.content;\r\n      return chatResult;\r\n    } catch (error) {\r\n      console.error('Error:', error.response.data);\r\n      return null;\r\n    }\r\n  }\r\n  const prompt = ${exception};\r\n  const userParams = 'Only answer business-related questions. If they are not business related, ONLY say \"sorry, I can only assist in business related things\"';\r\n  \r\n  queryChatbot(prompt, userParams)\r\n    .then(response => {\r\n      setChatArray([...chatArray, {response}]);\r\n    })\r\n    .catch(error => {\r\n      console.error('Error:', error);\r\n    });\r\n}, [convoCounter])\r\n\r\n`\r\nconst css = `\r\n/*SECTION - Widget Icon design and functionality*/\r\n.widget-Icon{\r\n    font-size: 36px;\r\n    border-radius: 50%;\r\n    height: 36px;\r\n    padding: 15px;\r\n    transition: box-shadow .2s ease;\r\n    cursor: pointer;\r\n    /* pointer-events: none; */\r\n    text-align: center;\r\n}\r\n.neutral-widget-icon{\r\n    background-color: ${widgetColor};\r\n    width: 38px;\r\n    padding: 16px 20px 16px 13px;\r\n}\r\n.neutral-widget-icon:hover {\r\n    box-shadow: 0 0 10px rgba(255, 255, 255, 1); /* Apply the glowing effect on hover */\r\n}\r\n.closing-widget-icon{\r\n    background-color: ${xBtnColor};\r\n    color: white;\r\n    width: 36px;\r\n    line-height: 32px;\r\n}\r\n.closing-widget-icon:hover{\r\n    box-shadow: 0 0 10px rgb(87, 87, 87); /* Apply the glowing effect on hover */\r\n}\r\n#neutral-widget-icon-div::selection{\r\n    transform: rotate(180deg) translateY(11px);\r\n}\r\n#closing-widget-icon-div::selection{\r\n    transform: rotate(-180deg) translateY(-19px);\r\n}\r\n#closing-widget-icon-div, #neutral-widget-icon-div{\r\n    transition: all 0.2s ease-in-out 0s;\r\n    /* cursor: pointer; */\r\n    justify-self: center;\r\n}\r\n#closing-widget-icon-div{\r\n    padding-top: 20px;\r\n}\r\n\r\n\r\n#widget-open-icon{\r\n    position: relative; /*FIXME - FIX THIS LATER TO MAKE POSITION IN THE RIGHT BOTTOM CORNER */\r\n    width: 320px;\r\n    border: 1px solid #ccc;\r\n    background-color: #fff;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\r\n}\r\n#chat-widget {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    grid-column: span 2;\r\n    display: grid;\r\n    grid-template-rows: 6fr 1fr;\r\n    grid-template-columns: 1fr;\r\n    width: 100%;\r\n    height: 95%;\r\n}\r\n\r\n\r\n/*SECTION - Header elements (img, entry text, and header color)*/\r\n#chat-header {\r\n    padding: 10px;\r\n    background-color: ${headerColor}\r\n    border-bottom: 2px solid #ccc;\r\n    display: flex;\r\n}\r\n.img-trim{\r\n    position: absolute;\r\n    max-height: 50px;\r\n    max-width: 50px;\r\n    overflow: hidden;\r\n    border-radius: 100%;\r\n    bottom: 93%;\r\n    border: 4px solid;\r\n    border-color: ${pfpLineColor};\r\n}\r\n#widget-profile{\r\n    width: 120px;\r\n    height: 60px;\r\n    padding: 0;\r\n    margin-left: -30px;\r\n    /* margin-top: 0px; */\r\n}\r\n#chat-header h2 {\r\n    margin: 0;\r\n    font-size: 16px;\r\n    color: #333;\r\n    margin-left: 80px;\r\n    margin: 8px 8px 8px 65px;\r\n}\r\n\r\n/*SECTION - Chat design */\r\n#widget-open-icon{\r\n    border: transparent;\r\n    justify-self: center;\r\n    margin-right: 260px;\r\n    max-height: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-rows: 12% 88%;\r\n    grid-template-columns: 1fr;\r\n    padding: 0; \r\n    transition: all 300ms ease 0s;\r\n}\r\n#chat-body {\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-rows: 87% 13%;\r\n    overflow-x: hidden;\r\n}\r\n\r\n#chat-input {\r\n    padding: 10px;\r\n    background-color: ${footerColor};\r\n    border-top: 1px solid #ccc;\r\n    align-self: end;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n#chat-input input[type=\"text\"] {\r\n    width: 200px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 3px;\r\n}\r\n\r\n#chat-input button {\r\n    padding: 5px 10px;\r\n    margin-left: 10px;\r\n    border: none;\r\n    color: #fff;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n}\r\n\r\n#chat-messages {\r\n    height: 390px;\r\n    width: 100%;\r\n    max-height: 390px;\r\n    overflow-y: scroll;\r\n    ${widgetBgColor}\r\n}\r\n\r\n.chat-message {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.user-message {\r\n    background-color: #e2f3f5;\r\n    padding: 5px 10px;\r\n    border-radius: 3px;\r\n}\r\n\r\n.assistant-message {\r\n    background-color: #d3d3d3;\r\n    padding: 5px 10px;\r\n    border-radius: 3px;\r\n}\r\n\r\n/*SECTION - Chat Design  */\r\n.User-Text-Bubble{\r\n    margin-right: 10px;\r\n}\r\n.User-Text-Bubble-Div{\r\n    margin: 10px;\r\n    width: fit-content;\r\n    margin-left: auto;\r\n    padding-left: 10px;\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: end;\r\n    ${userTxTBubble}\r\n    border-radius: 10px 10px 0px 10px;\r\n}\r\n.VA-Text-Bubble{\r\n    margin-left: 10px;\r\n}\r\n.VA-Text-Bubble-Div{\r\n    margin: 10px;\r\n    width: fit-content;\r\n    position: relative;\r\n    display: flex;\r\n    margin-right: 20%;\r\n    justify-content: start;\r\n    ${AiTxtBubble}\r\n    border-radius: 10px 10px 10px 0px;\r\n}\r\n\r\n#chat-input > *{\r\n    height: 40px;\r\n}\r\n#send-button{\r\n  background-color: ${submitBtn}\r\n}\r\n`\r\n\r\n  return (\r\n    <div id='FormBorder'>\r\n      <div id='Output-Border'>\r\n        <div id='html'></div>\r\n          <h1>HTML</h1>\r\n          <pre>\r\n            {html}\r\n          </pre>\r\n        <div id='javascript'>\r\n          <h1>Javascript</h1>\r\n          <pre>\r\n            {javascript}\r\n          </pre>\r\n        </div>\r\n        <div id='css'>\r\n          <h1>CSS</h1>\r\n          <pre>\r\n            {css}\r\n          </pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WidgetCreated"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,aAAa;AACpB,SAASC,WAAW,QAAQ,2BAA2B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACvD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IACJC,SAAS;IACTC,aAAa;IACbC,WAAW;IACXC,aAAa;IACbC,WAAW;IACXC,SAAS;IACTC,SAAS;IACTC,WAAW;IACXC,YAAY;IACZC,WAAW;IACXC,KAAK;IACLC;EACF,CAAC,GAAGjB,UAAU,CAACC,WAAW,CAAC;EAE3B,MAAMiB,IAAI,GAAI;AAChB;AACA;AACA;AACA;AACA;AACA,oDAAoDF,KAAM;AAC1D;AACA,cAAcV,SAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAEH,MAAMa,SAAS,GAAG,sCAAsC;EACxD,MAAMC,UAAU,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0BH,MAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBE,SAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;EACD,MAAME,GAAG,GAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBX,WAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBC,SAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBE,WAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoBC,YAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBC,WAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMN,aAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,aAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsBI,SAAU;AAChC;AACA,CAAC;EAEC,oBACET,OAAA;IAAKmB,EAAE,EAAC,YAAY;IAAAC,QAAA,eAClBpB,OAAA;MAAKmB,EAAE,EAAC,eAAe;MAAAC,QAAA,gBACrBpB,OAAA;QAAKmB,EAAE,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACnBxB,OAAA;QAAAoB,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACbxB,OAAA;QAAAoB,QAAA,EACGL;MAAI;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACRxB,OAAA;QAAKmB,EAAE,EAAC,YAAY;QAAAC,QAAA,gBAClBpB,OAAA;UAAAoB,QAAA,EAAI;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnBxB,OAAA;UAAAoB,QAAA,EACGH;QAAU;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNxB,OAAA;QAAKmB,EAAE,EAAC,KAAK;QAAAC,QAAA,gBACXpB,OAAA;UAAAoB,QAAA,EAAI;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACZxB,OAAA;UAAAoB,QAAA,EACGF;QAAG;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAAtB,EAAA,CAjYKD,aAAa;AAAAwB,EAAA,GAAbxB,aAAa;AAmYnB,eAAeA,aAAa;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}