[{"C:\\Users\\bryan\\Documents\\React-Project\\src\\index.js":"1","C:\\Users\\bryan\\Documents\\React-Project\\src\\reportWebVitals.js":"2","C:\\Users\\bryan\\Documents\\React-Project\\src\\App.js":"3","C:\\Users\\bryan\\Documents\\React-Project\\src\\context\\MainContext.js":"4","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\index.js":"5","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\BackgroundLayout\\index.js":"6","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\HomePage\\index.js":"7","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreated\\index.js":"8","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetDisplay\\index.js":"9","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\CollapsedWidgetColor\\index.js":"10","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\InputAPIKey\\index.js":"11","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\WidgetBgColor\\index.js":"12","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\UserTextBubbleColor\\index.js":"13","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\ImageInput\\index.js":"14","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\XbuttonColor\\index.js":"15","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\OptionalInputs\\index.js":"16","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\BotParameters\\index.js":"17","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\PfpLineColor\\index.js":"18","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\WelcomeText\\index.js":"19","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\HeaderColor\\index.js":"20","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\BotTextBubbleColor\\index.js":"21","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\SubmitBtnColor\\index.js":"22","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\FooterColor\\index.js":"23","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\ComponentFunctionality\\Canvas\\index.js":"24"},{"size":761,"mtime":1687457954936,"results":"25","hashOfConfig":"26"},{"size":375,"mtime":1687457954937,"results":"27","hashOfConfig":"26"},{"size":780,"mtime":1687457954901,"results":"28","hashOfConfig":"26"},{"size":2101,"mtime":1687457954926,"results":"29","hashOfConfig":"26"},{"size":3514,"mtime":1687457954922,"results":"30","hashOfConfig":"26"},{"size":351,"mtime":1687457954903,"results":"31","hashOfConfig":"26"},{"size":843,"mtime":1687457954904,"results":"32","hashOfConfig":"26"},{"size":9389,"mtime":1687457954905,"results":"33","hashOfConfig":"26"},{"size":5726,"mtime":1687457954923,"results":"34","hashOfConfig":"26"},{"size":1310,"mtime":1687457954910,"results":"35","hashOfConfig":"26"},{"size":684,"mtime":1687457954914,"results":"36","hashOfConfig":"26"},{"size":1313,"mtime":1687457954920,"results":"37","hashOfConfig":"26"},{"size":1303,"mtime":1687457954918,"results":"38","hashOfConfig":"26"},{"size":2178,"mtime":1687457954913,"results":"39","hashOfConfig":"26"},{"size":1259,"mtime":1687457954921,"results":"40","hashOfConfig":"26"},{"size":2503,"mtime":1687457954915,"results":"41","hashOfConfig":"26"},{"size":388,"mtime":1687457954908,"results":"42","hashOfConfig":"26"},{"size":1280,"mtime":1687457954916,"results":"43","hashOfConfig":"26"},{"size":651,"mtime":1687457954919,"results":"44","hashOfConfig":"26"},{"size":1260,"mtime":1687457954912,"results":"45","hashOfConfig":"26"},{"size":1284,"mtime":1687457954909,"results":"46","hashOfConfig":"26"},{"size":1284,"mtime":1687457954917,"results":"47","hashOfConfig":"26"},{"size":1243,"mtime":1687457954911,"results":"48","hashOfConfig":"26"},{"size":245,"mtime":1687457954907,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r2u5k5",{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},"C:\\Users\\bryan\\Documents\\React-Project\\src\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\reportWebVitals.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\App.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\context\\MainContext.js",["132","133"],[],"import React, {createContext, useContext, useState} from 'react'\r\nimport \"./MainContext.css\"\r\nexport let MainContext = createContext()\r\n\r\nconst MainContextProvider = (props) => {\r\n\r\n    const [logo, setLogo] = useState(\r\n        <img src={require(\"../images/logo.png\")} className='logo'/>\r\n        )\r\n    const [selectedImage, setSelectedImage] = useState(\"\");\r\n    \r\n    // SECTION - Important Info for VA\r\n    const [entryText, setEntryText] = useState('')\r\n    const [userTxTBubble, setUserTxtBubble] = useState('')\r\n    const [AiTxtBubble, setAiTxtBubble] = useState('')\r\n    const [widgetBgColor, setWidgetBgColor] = useState('')\r\n    const [widgetColor, setWidgetColor] = useState('')\r\n    const [xBtnColor, setXBtnColor] = useState('')\r\n    const [submitBtn, setSubmitBtn] = useState('')\r\n    const [headerColor, setHeaderColor] = useState('')\r\n    const [pfpLineColor, setPfpLineColor] = useState('')\r\n    const [footerColor, setFooterColor] = useState('')\r\n    const [VAimg, setVAImg] = useState('')\r\n    const [APIKEY, setAPIKEY] = useState('')\r\n    const [imgEditDiv, setImgEditDiv] = useState(\"none\")\r\n    const [imageDimensions, setImageDimensions] = useState({\r\n      width:\"fit-content\",\r\n      height: \"100%\",\r\n      rotation: \"\"\r\n    });\r\n\r\n    const object = {\r\n      logo,\r\n      setLogo,\r\n      selectedImage, \r\n      setSelectedImage,\r\n      entryText,\r\n      setEntryText,\r\n      userTxTBubble,\r\n      setUserTxtBubble,\r\n      AiTxtBubble,\r\n      setAiTxtBubble,\r\n      widgetBgColor,\r\n      setWidgetBgColor,\r\n      widgetColor,\r\n      setWidgetColor,\r\n      xBtnColor,\r\n      setXBtnColor,\r\n      submitBtn,\r\n      setSubmitBtn,\r\n      headerColor,\r\n      setHeaderColor,\r\n      pfpLineColor,\r\n      setPfpLineColor,\r\n      footerColor,\r\n      setFooterColor,\r\n      VAimg,\r\n      setVAImg,\r\n      APIKEY,\r\n      setAPIKEY,\r\n      imageDimensions,\r\n      setImageDimensions,\r\n      imgEditDiv,\r\n      setImgEditDiv\r\n    }\r\n  return (\r\n    <MainContext.Provider value={object}>\r\n        {props.children}\r\n    </MainContext.Provider>\r\n  )\r\n}\r\n\r\nexport default MainContextProvider","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\index.js",["134","135","136","137","138","139","140","141"],[],"import React, {useEffect, useContext, useState, useRef} from 'react'\r\nimport axios from 'axios'\r\nimport openai, {Configuration, OpenAIApi} from \"openai\"\r\nimport {MainContext} from '../../context/MainContext'\r\nimport './index.css'\r\nimport {Link} from 'react-router-dom'\r\nimport ImageInput from './InputComponents/ImageInput'\r\nimport InputAPIKey from './InputComponents/InputAPIKey'\r\nimport WidgetBgColor from './InputComponents/WidgetBgColor'\r\nimport CollapsedWidgetColor from './InputComponents/CollapsedWidgetColor'\r\nimport UserTextBubbleColor from './InputComponents/UserTextBubbleColor'\r\nimport EntryText from './InputComponents/WelcomeText'\r\nimport BotTextBubbleColor from './InputComponents/BotTextBubbleColor'\r\nimport XbuttonColor from './InputComponents/XbuttonColor'\r\nimport BotParameters from './InputComponents/BotParameters'\r\nimport OptionalInputs from './InputComponents/OptionalInputs'\r\nimport WidgetDisplay from '../WidgetDisplay'\r\nimport SubmitBtnColor from './InputComponents/SubmitBtnColor'\r\nimport HeaderColor from './InputComponents/HeaderColor'\r\nimport PfpOutlineColor from './InputComponents/PfpLineColor'\r\nimport FooterColor from './InputComponents/FooterColor'\r\nimport Canvas from './ComponentFunctionality/Canvas'\r\n\r\n\r\nconst WidgetCreation = () => {\r\n  const {\r\n    logo,\r\n    VAImg,\r\n    imgEditDiv,\r\n    setImgEditDiv\r\n  } = useContext(MainContext);\r\n  // useEffect(()=>{\r\n\r\n  // }, [VAImg])\r\n  \r\n  const handleClose = () =>{\r\n    setImgEditDiv('none')\r\n  }\r\n  return (\r\n    <>\r\n      <div className='homepageLogo'>\r\n        {logo}\r\n      </div>\r\n      <div id='FormBorder'>\r\n        <div id='FormSpacing'>\r\n        <ImageInput/>\r\n        <EntryText/>\r\n        <InputAPIKey/>\r\n        <HeaderColor/>\r\n        <WidgetBgColor/>\r\n        <CollapsedWidgetColor/>\r\n        <UserTextBubbleColor/>\r\n        <SubmitBtnColor/>\r\n        <BotTextBubbleColor/>\r\n        <XbuttonColor/> \r\n        <PfpOutlineColor/>\r\n        <FooterColor/>\r\n        <BotParameters/>\r\n        <OptionalInputs/>\r\n        <WidgetDisplay/>\r\n        </div>\r\n      </div>\r\n      <div id='ConfirmImgContainerBg' style={{display: imgEditDiv}}>\r\n        <div id='ConfirmImgContainer'>\r\n            <div id='ImgHeaderContainer'>\r\n              <p>Edit Photo</p>  \r\n              <i className=\"fa-regular fa-x\" id='close-img-edit-btn' onClick={handleClose}></i>\r\n            </div> \r\n            <Canvas/>\r\n            <div id='ImageEditOptions'>\r\n              <button className='active'><i className=\"fa-solid fa-crop-simple\"></i>Crop</button>\r\n            </div>\r\n            <div id='ImgRotationBtn'>\r\n              <button><i className=\"fa-solid fa-arrow-rotate-right\"></i></button>\r\n              <button><i className=\"fa-solid fa-arrow-rotate-left\"></i></button>\r\n            </div>\r\n            <div id='AdjustImgCtrl'>\r\n              <div>\r\n                <p>Zoom</p>\r\n                <span><i className=\"fa-solid fa-minus\"></i><input type='range'/><i className=\"fa-solid fa-plus\"></i></span>\r\n              </div>\r\n              <div>\r\n                <p>Straighten</p>\r\n                <span><i className=\"fa-solid fa-minus\"></i><input type='range'/><i className=\"fa-solid fa-plus\"></i></span>\r\n              </div>\r\n            </div>\r\n            <div id='ImgFooterContainer'>\r\n              <button>Save Photo</button>\r\n            </div>\r\n        </div>\r\n      </div>\r\n      <Link to=\"/CreateWidget/WidgetCreated\"><button id='Create-Button'>Create</button></Link>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WidgetCreation","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\BackgroundLayout\\index.js",["142","143"],[],"import React from 'react'\r\nimport './index.css'\r\nconst Background = () => {\r\n  return (\r\n    <div id=\"imageContainer\">\r\n        <img className=\"vines\" id=\"leftVine\" src={require('../../images/vineLeft.png')}/>\r\n        <img className=\"vines\" id=\"rightVine\" src={require('../../images/vineRight.png')}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Background","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\HomePage\\index.js",["144"],[],"import React, { useContext } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport './index.css'\r\nimport {MainContext} from '../../context/MainContext'\r\n\r\nconst Home = () => {\r\n    const {logo} = useContext(MainContext)\r\n  return (\r\n    <>\r\n    <div className='homepageLogo'>\r\n      {logo}\r\n    </div>\r\n    <div className='BorderBox'>\r\n        <p>\r\n        Design your own personalized assistant widget, \r\n        tailored to your needs, and unleash your creativity \r\n        in crafting a seamless extension of efficiency and functionality\r\n        that reflects your unique style and desires.\r\n        </p>\r\n        <Link to='./CreateWidget'><button>Begin</button></Link>\r\n    </div>\r\n    <div className='maidContainer'>\r\n      <img id=\"maid\" src={require('../../images/maid.png')}/>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreated\\index.js",["145"],[],"import React, { useContext } from 'react'\r\nimport './index.css'\r\nimport { MainContext } from '../../context/MainContext'\r\nconst WidgetCreated = () => {\r\n  const {\r\n    entryText,\r\n    userTxTBubble,\r\n    AiTxtBubble,\r\n    widgetBgColor,\r\n    widgetColor,\r\n    xBtnColor,\r\n    submitBtn,\r\n    headerColor,\r\n    pfpLineColor,\r\n    footerColor,\r\n    VAimg,\r\n    APIKEY\r\n  } = useContext(MainContext)\r\n\r\n  const html = `\r\n  <div id=\"chat-widget\">\r\n    {/*SECTION - Below This is the chat */}\r\n    <div id=\"widget-open-icon\" style={{ display: toggle.ChatWidget }}>\r\n      <div id=\"chat-header\">\r\n        <div className=\"img-trim\">\r\n          {<img id=\"widget-profile\" src={require('${VAimg}')}/>}\r\n        </div>\r\n        <h2>${entryText}</h2>\r\n        {/*NOTE - This is the entry comment */} \r\n      </div>\r\n      <div id=\"chat-body\">\r\n        <div id=\"chat-messages\" ref={handleScroll}>\r\n          {chatDisplay}\r\n        </div>\r\n        <form id=\"chat-input\" onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            id=\"user-input\"\r\n            value={input}\r\n            onChange={handleInput}\r\n            placeholder=\"Type your message...\"\r\n          />\r\n          <button id=\"send-button\">\r\n            Send\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    {/*SECTION - Below is the Wiget bubble icons for close and open */}\r\n    <div id=\"closing-widget-icon-div\" style={{ display: toggle.ChatWidget }} onClick={handleToggle}>\r\n      <i className=\"fa-light fa-x closing-widget-icon widget-Icon\"></i>\r\n    </div>\r\n    <div id=\"neutral-widget-icon-div\" style={{ display: toggle.NeutralWidget}} onClick={handleToggle}>\r\n      <i className=\"far neutral-widget-icon widget-Icon\">&#xf086;</i>\r\n    </div>\r\n  </div>\r\n  `\r\n\r\nconst exception = \"`${chatArray[chatArray.length - 1]}`\"\r\nconst javascript = `\r\n// SECTION - Set up states\r\nconst [toggle, setToggle] = useState({\r\n  NeutralWidget: '',\r\n  ChatWidget: 'none',\r\n});\r\nconst [input, setInput] = useState('');\r\nconst [chatArray, setChatArray] = useState([]);\r\nconst [convoCounter, SetConvoCounter] = useState(1)\r\n\r\nconst handleToggle = (e) => {\r\n  if (e.target.className.includes('neutral-widget-icon')) {\r\n    setToggle({\r\n      NeutralWidget: 'none',\r\n      ChatWidget: '',\r\n    });\r\n  } else {\r\n    setToggle({\r\n      NeutralWidget: '',\r\n      ChatWidget: 'none',\r\n    });\r\n  }\r\n};\r\n\r\nconst handleInput = (e) => {\r\n  setInput(e.target.value);\r\n};\r\n\r\nconst handleSubmit = (e) => {\r\n  e.preventDefault()\r\n  if(input == \"\") return\r\n  setChatArray([...chatArray, input]);\r\n  setInput('');\r\n  SetConvoCounter(convoCounter + 1)\r\n};\r\nconst handleScroll = (e) =>{\r\n  if(e === null) return\r\n  e.scrollTop = e.scrollHeight\r\n}\r\n// SECTION - Populates the chat \r\nconst chatDisplay = chatArray.map((text, index) =>{\r\n  if(typeof text != \"string\"){\r\n    console.log(text.response)\r\n    return(\r\n      <div className='VA-Text-Bubble-Div' key={index} >\r\n        <p className='VA-Text-Bubble'>{text.response}</p>\r\n      </div>\r\n    )\r\n  }else{\r\n    return (\r\n    <div className=\"User-Text-Bubble-Div\" key={index}>\r\n      <p className=\"User-Text-Bubble\">{text} </p>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n);\r\n\r\n//SECTION - ChatGPT API\r\nuseEffect(()=>{\r\n  async function queryChatbot(prompt, userParams = '') {\r\n    const url = 'https://api.openai.com/v1/chat/completions';\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': '${APIKEY}'\r\n    };\r\n  \r\n    const systemMessage = { role: 'system', content: 'You are a helpful assistant.' };\r\n    const userMessage = { role: 'user', content: prompt };\r\n    const messages = [systemMessage, userMessage];\r\n  \r\n    if (userParams) {\r\n      const paramMessage = { role: 'user', content: userParams };\r\n      messages.push(paramMessage);\r\n    }\r\n  \r\n    const data = {\r\n      model: 'gpt-3.5-turbo',\r\n      messages\r\n    };\r\n  \r\n    try {\r\n      const response = await axios.post(url, data, { headers });\r\n      const chatResult = response.data.choices[0].message.content;\r\n      return chatResult;\r\n    } catch (error) {\r\n      console.error('Error:', error.response.data);\r\n      return null;\r\n    }\r\n  }\r\n  const prompt = ${exception};\r\n  const userParams = 'Only answer business-related questions. If they are not business related, ONLY say \"sorry, I can only assist in business related things\"';\r\n  \r\n  queryChatbot(prompt, userParams)\r\n    .then(response => {\r\n      setChatArray([...chatArray, {response}]);\r\n    })\r\n    .catch(error => {\r\n      console.error('Error:', error);\r\n    });\r\n}, [convoCounter])\r\n\r\n`\r\nconst css = `\r\n/*SECTION - Widget Icon design and functionality*/\r\n.widget-Icon{\r\n    font-size: 36px;\r\n    border-radius: 50%;\r\n    height: 36px;\r\n    padding: 15px;\r\n    transition: box-shadow .2s ease;\r\n    cursor: pointer;\r\n    /* pointer-events: none; */\r\n    text-align: center;\r\n}\r\n.neutral-widget-icon{\r\n    background-color: ${widgetColor};\r\n    width: 38px;\r\n    padding: 16px 20px 16px 13px;\r\n}\r\n.neutral-widget-icon:hover {\r\n    box-shadow: 0 0 10px rgba(255, 255, 255, 1); /* Apply the glowing effect on hover */\r\n}\r\n.closing-widget-icon{\r\n    background-color: ${xBtnColor};\r\n    color: white;\r\n    width: 36px;\r\n    line-height: 32px;\r\n}\r\n.closing-widget-icon:hover{\r\n    box-shadow: 0 0 10px rgb(87, 87, 87); /* Apply the glowing effect on hover */\r\n}\r\n#neutral-widget-icon-div::selection{\r\n    transform: rotate(180deg) translateY(11px);\r\n}\r\n#closing-widget-icon-div::selection{\r\n    transform: rotate(-180deg) translateY(-19px);\r\n}\r\n#closing-widget-icon-div, #neutral-widget-icon-div{\r\n    transition: all 0.2s ease-in-out 0s;\r\n    /* cursor: pointer; */\r\n    justify-self: center;\r\n}\r\n#closing-widget-icon-div{\r\n    padding-top: 20px;\r\n}\r\n\r\n\r\n#widget-open-icon{\r\n    position: relative; /*FIXME - FIX THIS LATER TO MAKE POSITION IN THE RIGHT BOTTOM CORNER */\r\n    width: 320px;\r\n    border: 1px solid #ccc;\r\n    background-color: #fff;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\r\n}\r\n#chat-widget {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    grid-column: span 2;\r\n    display: grid;\r\n    grid-template-rows: 6fr 1fr;\r\n    grid-template-columns: 1fr;\r\n    width: 100%;\r\n    height: 95%;\r\n}\r\n\r\n\r\n/*SECTION - Header elements (img, entry text, and header color)*/\r\n#chat-header {\r\n    padding: 10px;\r\n    background-color: ${headerColor}\r\n    border-bottom: 2px solid #ccc;\r\n    display: flex;\r\n}\r\n.img-trim{\r\n    position: absolute;\r\n    max-height: 50px;\r\n    max-width: 50px;\r\n    overflow: hidden;\r\n    border-radius: 100%;\r\n    bottom: 93%;\r\n    border: 4px solid;\r\n    border-color: ${pfpLineColor};\r\n}\r\n#widget-profile{\r\n    width: 120px;\r\n    height: 60px;\r\n    padding: 0;\r\n    margin-left: -30px;\r\n    /* margin-top: 0px; */\r\n}\r\n#chat-header h2 {\r\n    margin: 0;\r\n    font-size: 16px;\r\n    color: #333;\r\n    margin-left: 80px;\r\n    margin: 8px 8px 8px 65px;\r\n}\r\n\r\n/*SECTION - Chat design */\r\n#widget-open-icon{\r\n    border: transparent;\r\n    justify-self: center;\r\n    margin-right: 260px;\r\n    max-height: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-rows: 12% 88%;\r\n    grid-template-columns: 1fr;\r\n    padding: 0; \r\n    transition: all 300ms ease 0s;\r\n}\r\n#chat-body {\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-rows: 87% 13%;\r\n    overflow-x: hidden;\r\n}\r\n\r\n#chat-input {\r\n    padding: 10px;\r\n    background-color: ${footerColor};\r\n    border-top: 1px solid #ccc;\r\n    align-self: end;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n#chat-input input[type=\"text\"] {\r\n    width: 200px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 3px;\r\n}\r\n\r\n#chat-input button {\r\n    padding: 5px 10px;\r\n    margin-left: 10px;\r\n    border: none;\r\n    color: #fff;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n}\r\n\r\n#chat-messages {\r\n    height: 390px;\r\n    width: 100%;\r\n    max-height: 390px;\r\n    overflow-y: scroll;\r\n    ${widgetBgColor}\r\n}\r\n\r\n.chat-message {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.user-message {\r\n    background-color: #e2f3f5;\r\n    padding: 5px 10px;\r\n    border-radius: 3px;\r\n}\r\n\r\n.assistant-message {\r\n    background-color: #d3d3d3;\r\n    padding: 5px 10px;\r\n    border-radius: 3px;\r\n}\r\n\r\n/*SECTION - Chat Design  */\r\n.User-Text-Bubble{\r\n    margin-right: 10px;\r\n}\r\n.User-Text-Bubble-Div{\r\n    margin: 10px;\r\n    width: fit-content;\r\n    margin-left: auto;\r\n    padding-left: 10px;\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: end;\r\n    ${userTxTBubble}\r\n    border-radius: 10px 10px 0px 10px;\r\n}\r\n.VA-Text-Bubble{\r\n    margin-left: 10px;\r\n}\r\n.VA-Text-Bubble-Div{\r\n    margin: 10px;\r\n    width: fit-content;\r\n    position: relative;\r\n    display: flex;\r\n    margin-right: 20%;\r\n    justify-content: start;\r\n    ${AiTxtBubble}\r\n    border-radius: 10px 10px 10px 0px;\r\n}\r\n\r\n#chat-input > *{\r\n    height: 40px;\r\n}\r\n#send-button{\r\n  background-color: ${submitBtn}\r\n}\r\n`\r\n\r\n  return (\r\n    <div id='FormBorder'>\r\n      <div id='Output-Border'>\r\n        <div id='html'></div>\r\n          <h1>HTML</h1>\r\n          <pre>\r\n            {html}\r\n          </pre>\r\n        <div id='javascript'>\r\n          <h1>Javascript</h1>\r\n          <pre>\r\n            {javascript}\r\n          </pre>\r\n        </div>\r\n        <div id='css'>\r\n          <h1>CSS</h1>\r\n          <pre>\r\n            {css}\r\n          </pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WidgetCreated","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetDisplay\\index.js",["146","147","148","149","150","151","152","153"],[],"import React, { useState, useEffect, useRef, useContext } from 'react'\r\nimport axios from 'axios';\r\nimport \"./index.css\"\r\nimport openai, {Configuration, OpenAIApi} from \"openai\"\r\nimport { MainContext } from '../../context/MainContext';\r\n\r\nconst WidgetDisplay = () => {\r\n  //SECTION - useContext\r\n  const {\r\n    entryText,\r\n    userTxTBubble,\r\n    AiTxtBubble,\r\n    widgetBgColor,\r\n    widgetColor,\r\n    xBtnColor,\r\n    submitBtn,\r\n    headerColor,\r\n    pfpLineColor,\r\n    footerColor,\r\n    VAimg,\r\n    imageDimensions\r\n  } = useContext(MainContext)\r\n\r\n  // SECTION - Set up states\r\n  const [toggle, setToggle] = useState({\r\n    NeutralWidget: '',\r\n    ChatWidget: 'none',\r\n  });\r\n  const [input, setInput] = useState('');\r\n  const [chatArray, setChatArray] = useState([]);\r\n  const [convoCounter, SetConvoCounter] = useState(1)\r\n\r\n  const handleToggle = (e) => {\r\n    if (e.target.className.includes('neutral-widget-icon')) {\r\n      setToggle({\r\n        NeutralWidget: 'none',\r\n        ChatWidget: '',\r\n      });\r\n    } else {\r\n      setToggle({\r\n        NeutralWidget: '',\r\n        ChatWidget: 'none',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if(input == \"\") return\r\n    setChatArray([...chatArray, input]);\r\n    setInput('');\r\n    SetConvoCounter(convoCounter + 1)\r\n  };\r\n  const handleScroll = (e) =>{\r\n    if(e === null) return\r\n    e.scrollTop = e.scrollHeight\r\n  }\r\n  // SECTION - Populates the chat \r\n  const chatDisplay = chatArray.map((text, index) =>{\r\n    if(typeof text != \"string\"){\r\n      console.log(text.response)\r\n      return(\r\n        <div className='VA-Text-Bubble-Div' key={index} style={{backgroundColor:AiTxtBubble || \"lightblue\"}}>\r\n          <p className='VA-Text-Bubble'>{text.response}</p>\r\n        </div>\r\n      )\r\n    }else{\r\n      return (\r\n      <div className=\"User-Text-Bubble-Div\" key={index} style={{backgroundColor:userTxTBubble || \"lightblue\"}}>\r\n        <p className=\"User-Text-Bubble\">{text} </p>\r\n      </div>\r\n      )\r\n    }\r\n  }\r\n  );\r\n\r\n  //SECTION - ChatGPT API\r\n  // useEffect(()=>{\r\n  //   async function queryChatbot(prompt, userParams = '') {\r\n  //     const url = 'https://api.openai.com/v1/chat/completions';\r\n  //     const headers = {\r\n  //       'Content-Type': 'application/json',\r\n  //       'Authorization': `Bearer ${process.env.REACT_APP_API_KEY}`\r\n  //     };\r\n    \r\n  //     const systemMessage = { role: 'system', content: 'You are a helpful assistant.' };\r\n  //     const userMessage = { role: 'user', content: prompt };\r\n  //     const messages = [systemMessage, userMessage];\r\n    \r\n  //     if (userParams) {\r\n  //       const paramMessage = { role: 'user', content: userParams };\r\n  //       messages.push(paramMessage);\r\n  //     }\r\n    \r\n  //     const data = {\r\n  //       model: 'gpt-3.5-turbo',\r\n  //       messages\r\n  //     };\r\n    \r\n  //     try {\r\n  //       const response = await axios.post(url, data, { headers });\r\n  //       const chatResult = response.data.choices[0].message.content;\r\n  //       return chatResult;\r\n  //     } catch (error) {\r\n  //       console.error('Error:', error.response.data);\r\n  //       return null;\r\n  //     }\r\n  //   }\r\n    \r\n  //   // Example usage ${input}\r\n  //   const prompt = `${chatArray[chatArray.length - 1]}`;\r\n  //   const userParams = 'Only answer business-related questions. If they are not business related, ONLY say \"sorry, I can only assist in business related things\"';\r\n    \r\n  //   queryChatbot(prompt, userParams)\r\n  //     .then(response => {\r\n  //       setChatArray([...chatArray, {response}]);\r\n  //       // console.log(response)\r\n  //     })\r\n  //     .catch(error => {\r\n  //       console.error('Error:', error);\r\n  //     });\r\n  // }, [convoCounter])\r\n\r\n  return (\r\n    <div id=\"chat-widget\">\r\n      {/*SECTION - Below This is the chat */}\r\n      <div id=\"widget-open-icon\" style={{ display: toggle.ChatWidget }}>\r\n        <div id=\"chat-header\" style={{backgroundColor: headerColor || \"#f2f2f2\"}}>\r\n          <div className=\"img-trim\" style={{borderColor:pfpLineColor|| \"rgb(201, 197, 197)\"}}>\r\n            {<img id=\"widget-profile\" src={VAimg || require('./photo.jpg')} style={{height: imageDimensions.height, width: imageDimensions.width}}/>}\r\n          </div>\r\n          <h2>{entryText || \"Greetings!\"}</h2>\r\n          {/*NOTE - This is the entry comment */} \r\n        </div>\r\n        <div id=\"chat-body\">\r\n          <div id=\"chat-messages\" ref={handleScroll} style={{backgroundColor:widgetBgColor || \"white\"}}>\r\n            {chatDisplay}\r\n          </div>\r\n          <form id=\"chat-input\" onSubmit={handleSubmit} style={{backgroundColor: footerColor||\"#f2f2f2\"}}>\r\n            <input\r\n              type=\"text\"\r\n              id=\"user-input\"\r\n              value={input}\r\n              onChange={handleInput}\r\n              placeholder=\"Type your message...\"\r\n            />\r\n            <button id=\"send-button\" style={{backgroundColor:submitBtn || \"#4CAF50\"}}>\r\n              Send\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      {/*SECTION - Below is the Wiget bubble icons for close and open */}\r\n      <div id=\"closing-widget-icon-div\" style={{ display: toggle.ChatWidget }} onClick={handleToggle}>\r\n        <i className=\"fa-light fa-x closing-widget-icon widget-Icon\" style={{backgroundColor:xBtnColor || \"#e93d3d\"}}></i>\r\n      </div>\r\n      <div id=\"neutral-widget-icon-div\" style={{ display: toggle.NeutralWidget}} onClick={handleToggle}>\r\n        <i className=\"far neutral-widget-icon widget-Icon\" style={{backgroundColor:widgetColor || \"white\"}}>&#xf086;</i>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default WidgetDisplay","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\CollapsedWidgetColor\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\InputAPIKey\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\WidgetBgColor\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\UserTextBubbleColor\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\ImageInput\\index.js",["154","155","156"],[],"import React, {useContext, useEffect, useState} from 'react'\r\nimport \"./index.css\"\r\nimport { MainContext } from '../../../../context/MainContext';\r\n\r\nconst loadImage = (setImageDimensions, imageUrl, imageDimensions, setImgEditDiv) => {\r\n  const img = new Image();\r\n  img.src = imageUrl;\r\n\r\n  img.onload = () => {\r\n    if(img.width > img.height){\r\n      setImageDimensions({\r\n        ...imageDimensions,\r\n        height: \"100%\",\r\n        width: \"fit-content\"\r\n      });\r\n      setImgEditDiv(\"block\")\r\n    }else{\r\n      setImageDimensions({\r\n        height: \"fit-content\",\r\n        width: \"100%\"\r\n      });\r\n      alert(\"Photo positions in still in development, please close the tab. The inputed file will be auto-centered\")\r\n      setImgEditDiv(\"block\")\r\n    }\r\n  };\r\n  img.onerror = (err) => {\r\n    console.log(\"img error\");\r\n    console.error(err);\r\n  };\r\n};\r\n\r\nconst ImageInput = () => {\r\n  const {\r\n    setVAImg, \r\n    VAimg,\r\n    selectedImage,\r\n    setSelectedImage,\r\n    imageDimensions,\r\n    setImageDimensions,\r\n    setImgEditDiv\r\n  } = useContext(MainContext)\r\n\r\n  const handleImageUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file && file.type.startsWith(\"image/\")) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setSelectedImage(file.name);\r\n        setVAImg(reader.result)\r\n        loadImage(setImageDimensions, reader.result, imageDimensions, setImgEditDiv)\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n  \r\n  let fileName = `${selectedImage}`.slice(0,15)\r\n  if(fileName.length > 14) fileName = fileName + \"...\"\r\n\r\n  return (\r\n    <div className='ImageInputContainer'>\r\n      <label>VA Profile Image</label>\r\n      <div className=\"file-input-container\">\r\n        <input type=\"file\" id=\"file-input\" onChange={handleImageUpload} className=\"file-input\" accept=\"image/png, image/jpeg\"/>\r\n        <label htmlFor=\"file-input\" className=\"custom-label\">\r\n          <i className=\"fas fa-cloud-upload-alt\"></i> Upload file\r\n        </label>\r\n        <span id=\"file-name\" className=\"file-name\">{fileName ? `${fileName}` : \"No file chosen\"}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageInput","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\XbuttonColor\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\OptionalInputs\\index.js",["157"],[],"import React, { useEffect, useState } from 'react';\r\nimport \"./index.css\";\r\n\r\nconst OptionalInputs = () => {\r\n  const [input, setInput] = useState({\r\n    OptionalInputs0: '',\r\n  });\r\n  const [selectedValue, setSelectedValue] = useState({\r\n    OptionalInputs0: '',\r\n  });\r\n  const [populateArray, setPopulateArray] = useState([0]);\r\n\r\n  const handleInput = (e,name) => {\r\n    setInput({ ...input, [name]: e.target.value });\r\n  };\r\n  const handleSelectChange = (e, name) =>{\r\n    setSelectedValue({ ...selectedValue, [name]: e.target.value });\r\n  } \r\n  const handleAdd = (name, index) => {\r\n    setPopulateArray([...populateArray, index + 1]);\r\n    setInput({...input, [name.slice(0,14)+`${index+1}`]: \"\"})\r\n    setSelectedValue({...selectedValue, [name.slice(0,14)+`${index+1}`]: \"\"})\r\n  };\r\n  const handleMinus = (e) => {\r\n    e.target.parentElement.parentElement.style.display = \"none\"\r\n  };\r\n\r\n  const populate = populateArray.map((value, index) => {\r\n    let name = `OptionalInputs${index}`;\r\n    return (\r\n      <div className='OptionInputContainer' key={index}>\r\n        <div className='OptionInputDivDesign'>\r\n          <div className='PromptContainer'>\r\n            <label htmlFor='OptionalInputs'>\r\n              Entry User Information (Optional)\r\n            </label>\r\n            <input\r\n              name={name}\r\n              type='text'\r\n              placeholder='Ex: Full Name'\r\n              onChange={(e)=>{handleInput(e,name)}}\r\n              value={input[name]}\r\n            />\r\n          </div>\r\n          <div className='CatContainer'>\r\n            <label htmlFor='OptionalInputsCat'>\r\n              Category\r\n            </label>\r\n            <select name=\"OptionalInputsCat\" type='text' value={selectedValue[name]} onChange={(e) =>{handleSelectChange(e,name)}}>\r\n              <option value=\"None\">Select</option>\r\n              <option value=\"Country\">Country</option>\r\n              <option value=\"Name\">Name</option>\r\n              <option value=\"Request/Message\">Request/Message</option>\r\n              <option value=\"PhoneNumber\">Phone Number</option>\r\n              <option value=\"Email\">Email</option>\r\n            </select>\r\n          </div>\r\n          <i className=\"fa-solid fa-square-plus addBtn\" onClick={() => { handleAdd(name, index)}}></i>\r\n          <i className=\"fa-solid fa-square-minus minusBtn\" onClick={handleMinus}></i>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {populate}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OptionalInputs;\r\n","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\BotParameters\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\PfpLineColor\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\WelcomeText\\index.js",["158"],[],"import React, { useContext, useState } from 'react'\r\nimport { MainContext } from '../../../../context/MainContext'\r\n\r\nconst EntryText = () => {\r\n  const [input, setInput] = useState(\"\")\r\n  const {entryText, setEntryText} = useContext(MainContext)\r\n\r\n  const handleInput = (e) =>{\r\n    setInput(e.target.value)\r\n    setEntryText(e.target.value)\r\n  }\r\n\r\n  return (\r\n  <div className='EntryTextContainer'>\r\n    <label htmlFor='EntryText'>\r\n    VA Welcome Text\r\n    </label>\r\n    <input name=\"EntryText\" placeholder='Ex: Greetings!' type='text' value={input} onChange={handleInput}/>                          \r\n  </div>\r\n  )\r\n}\r\n\r\nexport default EntryText","C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\HeaderColor\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\BotTextBubbleColor\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\SubmitBtnColor\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\InputComponents\\FooterColor\\index.js",[],[],"C:\\Users\\bryan\\Documents\\React-Project\\src\\components\\WidgetCreation\\ComponentFunctionality\\Canvas\\index.js",["159","160","161","162"],[],"import React, {useEffect, useContext, useState, useRef} from 'react'\r\nimport './index.css'\r\n\r\nconst Canvas = () => {\r\n  const canvas = React.useRef()\r\n  return (\r\n    <canvas id='ImgCanvas' ref={canvas}></canvas>\r\n  )\r\n}\r\n\r\nexport default Canvas",{"ruleId":"163","severity":1,"message":"164","line":1,"column":31,"nodeType":"165","messageId":"166","endLine":1,"endColumn":41},{"ruleId":"167","severity":1,"message":"168","line":8,"column":9,"nodeType":"169","endLine":8,"endColumn":68},{"ruleId":"163","severity":1,"message":"170","line":1,"column":16,"nodeType":"165","messageId":"166","endLine":1,"endColumn":25},{"ruleId":"163","severity":1,"message":"171","line":1,"column":39,"nodeType":"165","messageId":"166","endLine":1,"endColumn":47},{"ruleId":"163","severity":1,"message":"172","line":1,"column":49,"nodeType":"165","messageId":"166","endLine":1,"endColumn":55},{"ruleId":"163","severity":1,"message":"173","line":2,"column":8,"nodeType":"165","messageId":"166","endLine":2,"endColumn":13},{"ruleId":"163","severity":1,"message":"174","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":14},{"ruleId":"163","severity":1,"message":"175","line":3,"column":17,"nodeType":"165","messageId":"166","endLine":3,"endColumn":30},{"ruleId":"163","severity":1,"message":"176","line":3,"column":32,"nodeType":"165","messageId":"166","endLine":3,"endColumn":41},{"ruleId":"163","severity":1,"message":"177","line":28,"column":5,"nodeType":"165","messageId":"166","endLine":28,"endColumn":10},{"ruleId":"167","severity":1,"message":"168","line":6,"column":9,"nodeType":"169","endLine":6,"endColumn":90},{"ruleId":"167","severity":1,"message":"168","line":7,"column":9,"nodeType":"169","endLine":7,"endColumn":92},{"ruleId":"167","severity":1,"message":"168","line":23,"column":7,"nodeType":"169","endLine":23,"endColumn":62},{"ruleId":"178","severity":1,"message":"179","line":59,"column":19,"nodeType":"180","messageId":"181","endLine":59,"endColumn":57},{"ruleId":"163","severity":1,"message":"170","line":1,"column":27,"nodeType":"165","messageId":"166","endLine":1,"endColumn":36},{"ruleId":"163","severity":1,"message":"172","line":1,"column":38,"nodeType":"165","messageId":"166","endLine":1,"endColumn":44},{"ruleId":"163","severity":1,"message":"173","line":2,"column":8,"nodeType":"165","messageId":"166","endLine":2,"endColumn":13},{"ruleId":"163","severity":1,"message":"174","line":4,"column":8,"nodeType":"165","messageId":"166","endLine":4,"endColumn":14},{"ruleId":"163","severity":1,"message":"175","line":4,"column":17,"nodeType":"165","messageId":"166","endLine":4,"endColumn":30},{"ruleId":"163","severity":1,"message":"176","line":4,"column":32,"nodeType":"165","messageId":"166","endLine":4,"endColumn":41},{"ruleId":"182","severity":1,"message":"183","line":53,"column":14,"nodeType":"184","messageId":"185","endLine":53,"endColumn":16},{"ruleId":"167","severity":1,"message":"168","line":134,"column":14,"nodeType":"169","endLine":134,"endColumn":149},{"ruleId":"163","severity":1,"message":"170","line":1,"column":28,"nodeType":"165","messageId":"166","endLine":1,"endColumn":37},{"ruleId":"163","severity":1,"message":"171","line":1,"column":39,"nodeType":"165","messageId":"166","endLine":1,"endColumn":47},{"ruleId":"163","severity":1,"message":"186","line":35,"column":5,"nodeType":"165","messageId":"166","endLine":35,"endColumn":10},{"ruleId":"163","severity":1,"message":"170","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":26},{"ruleId":"163","severity":1,"message":"187","line":6,"column":10,"nodeType":"165","messageId":"166","endLine":6,"endColumn":19},{"ruleId":"163","severity":1,"message":"170","line":1,"column":16,"nodeType":"165","messageId":"166","endLine":1,"endColumn":25},{"ruleId":"163","severity":1,"message":"164","line":1,"column":27,"nodeType":"165","messageId":"166","endLine":1,"endColumn":37},{"ruleId":"163","severity":1,"message":"171","line":1,"column":39,"nodeType":"165","messageId":"166","endLine":1,"endColumn":47},{"ruleId":"163","severity":1,"message":"172","line":1,"column":49,"nodeType":"165","messageId":"166","endLine":1,"endColumn":55},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'axios' is defined but never used.","'openai' is defined but never used.","'Configuration' is defined but never used.","'OpenAIApi' is defined but never used.","'VAImg' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'VAimg' is assigned a value but never used.","'entryText' is assigned a value but never used."]